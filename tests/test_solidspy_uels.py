#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Tests for `solidspy_uels` package."""

import pytest
import numpy as np
import scipy.linalg as LA

# SolidsPy
from solidspy import gaussutil as gau
from solidspy.femutil import jacoper
from solidspy.assemutil import DME, dense_assem, loadasem
from solidspy.postprocesor import complete_disp

# SolidsPy UELs
from solidspy_uels.solidspy_uels import shape_brick8, shape_tri6, shape_quad9
from solidspy_uels.solidspy_uels import elast_brick8, elast_tri6, elast_quad9
from solidspy_uels.solidspy_uels import micropolar_tri6, micropolar_quad9
from solidspy_uels.solidspy_uels import cst_tri6, cst_quad9
from solidspy_uels.solidspy_uels import assem_op_cst, assem_op_cst6


#%% Test interpolators
def test_shape_tri6():
    # Interpolation condition check
    coords = np.array([
        [0.0, 0.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [0.5, 0.0],
        [0.5, 0.5],
        [0.0, 0.5]])
    N, _ = shape_tri6(coords[:, 0], coords[:, 1])
    assert np.allclose(N, np.eye(6))

    # Evaluation at (1/3, 1/3)
    N, dNdr = shape_tri6(1/3, 1/3)
    N_exp = np.array([-1., -1., -1., 4., 4., 4.])/9
    dNdr_exp = np.array([
                [-1.,  1.,  0.,  0.,  4., -4.],
                [-1.,  0.,  1., -4.,  4.,  0.]])/3
    assert np.allclose(N, N_exp)
    assert np.allclose(dNdr, dNdr_exp)


def test_shape_quad9():
    # Interpolation condition check
    coords = np.array([
        [-1.0, -1.0],
        [ 1.0, -1.0],
        [ 1.0,  1.0],
        [-1.0,  1.0],
        [ 0.0, -1.0],
        [ 1.0,  0.0],
        [ 0.0,  1.0],
        [-1.0,  0.0],
        [ 0.0,  0.0]])
    N, _ = shape_quad9(coords[:, 0], coords[:, 1])
    assert np.allclose(N, np.eye(9))

    # Evaluation at (1/4, 1/4)
    N, dNdr = shape_quad9(0.25, 0.25)
    N_exp = np.array(
        [0.00878906, -0.01464844, 0.02441406, -0.01464844,
        -0.08789062, 0.14648438, 0.14648438, -0.08789062,
        0.87890625])

    dNdr_exp = np.array([
        [0.0234375, -0.0703125, 0.1171875, -0.0390625, 0.046875,
            0.703125, -0.078125, -0.234375, -0.46875],
        [0.0234375, -0.0390625, 0.1171875, -0.0703125, -0.234375,
            -0.078125, 0.703125, 0.046875, -0.46875]])
    assert np.allclose(N, N_exp)
    assert np.allclose(dNdr, dNdr_exp)


def test_shape_brick8():
    # Interpolation condition check
    coords = np.array([
        [-1, -1, -1],
        [1, -1, -1],
        [1, 1, -1],
        [-1, 1, -1],
        [-1, -1, 1],
        [1, -1, 1],
        [1, 1, 1],
        [-1, 1, 1]])
    N, _ = shape_brick8(coords[:, 0], coords[:, 1], coords[:, 2])
    assert np.allclose(N, np.eye(8))

    # Evaluation at (0, 0, 0)
    N, dNdr = shape_brick8(0, 0, 0)
    N_exp = 0.125*np.array([1., 1., 1., 1., 1., 1., 1., 1.])
    dNdr_exp = 0.125*np.array([
        [-1.,  1.,  1., -1., -1.,  1.,  1., -1.],
        [-1., -1.,  1.,  1., -1., -1.,  1.,  1.],
        [-1., -1., -1., -1.,  1.,  1.,  1.,  1.]])
    assert np.allclose(N, N_exp)
    assert np.allclose(dNdr, dNdr_exp)


#%% Test interpolation matrices
def test_interp_mat_3d():
    pass


#%% Test elements
def test_elast_tri6():
    ## One element
    coords = np.array([
        [0.0, 0.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [0.5, 0.0],
        [0.5, 0.5],
        [0.0, 0.5]])
    params = [1, 1/4, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5]])

    # Element without constraints
    cons = np.zeros((6, 2))
    pts = np.column_stack((range(0, 6), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=2, 
                                  ndof_el=lambda iet: 12,
                                  ndof_el_max=12)
    assert np.allclose(assem_op, range(0, 12))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op, uel=elast_tri6)

    stiff_comp = 1/15 * np.array([
        [12, 6, 3, 1, 1, 1, -12, -4, 0, 0, -4, -4],
        [6, 12, 1, 1, 1, 3, -4, -4, 0, 0, -4, -12],
        [3, 1, 9, 0, 0, -1, -12, -4, 0, 4, 0, 0],
        [1, 1, 0, 3, -1, 0, -4, -4, 4, 0, 0, 0],
        [1, 1, 0, -1, 3, 0, 0, 0, 0, 4, -4, -4],
        [1, 3, -1, 0, 0, 9, 0, 0, 4, 0, -4, -12],
        [-12, -4, -12, -4, 0, 0, 32, 8, -8, -8, 0, 8],
        [-4, -4, -4, -4, 0, 0, 8, 32, -8, -24, 8, 0],
        [0, 0, 0, 4, 0, 4, -8, -8, 32, 8, -24, -8],
        [0, 0, 4, 0, 4, 0, -8, -24, 8, 32, -8, -8],
        [-4, -4, 0, 0, -4, -4, 0, 8, -24, -8, 32, 8],
        [-4, -12, 0, 0, -4, -12, 8, 0, -8, -8, 8, 32]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/360 *np.array([
        [6, 0, -1, 0, -1, 0, 0, 0, -4, 0, 0, 0],
        [0, 6, 0, -1, 0, -1, 0, 0, 0, -4, 0, 0],
        [-1, 0, 6, 0, -1, 0, 0, 0, 0, 0, -4, 0],
        [0, -1, 0, 6, 0, -1, 0, 0, 0, 0, 0, -4],
        [-1, 0, -1, 0, 6, 0, -4, 0, 0, 0, 0, 0],
        [0, -1, 0, -1, 0, 6, 0, -4, 0, 0, 0, 0],
        [0, 0, 0, 0, -4, 0, 32, 0, 16, 0, 16, 0],
        [0, 0, 0, 0, 0, -4, 0, 32, 0, 16, 0, 16],
        [-4, 0, 0, 0, 0, 0, 16, 0, 32, 0, 16, 0],
        [0, -4, 0, 0, 0, 0, 0, 16, 0, 32, 0, 16],
        [0, 0, -4, 0, 0, 0, 16, 0, 16, 0, 32, 0],
        [0, 0, 0, -4, 0, 0, 0, 16, 0, 16, 0, 32]])
    assert np.allclose(mass, mass_comp)

    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1]

    els = np.array([
        [0, 1, 0, 0, 2, 6, 1, 4, 3],
        [1, 1, 0, 8, 6, 2, 7, 4, 5]])
    cons = np.array([
        [-1,-1],
        [ 0,-1],
        [ 0,-1],
        [-1, 0],
        [ 0, 0],
        [ 0, 0],
        [-1, 0],
        [ 0, 0],
        [ 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=2, 
                                  ndof_el=lambda iet: 12,
                                  ndof_el_max=12)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op, uel=elast_tri6)
    loads = np.array([
        [6, 0, 1/3],
        [7, 0, 4/3],
        [8, 0, 1/3]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=2)
    sol = LA.solve(stiff, rhs)
    disp = complete_disp(bc_array, pts, sol, ndof_node=2)
    disp_comp = np.array([
        [ 0.0,  0.0],
        [-0.3125, 0.0],
        [-0.625,  0.0],
        [ 0.0,  0.9375],
        [-0.3125, 0.9375],
        [-0.625,  0.9375],
        [ 0.0,  1.875],
        [-0.3125, 1.875],
        [-0.625,  1.875]])
    assert np.allclose(disp, disp_comp)


def test_elast_quad9():
    ## One element
    coords = np.array([
        [-1.0,-1.0],
        [ 1.0,-1.0],
        [ 1.0, 1.0],
        [-1.0, 1.0],
        [ 0.0,-1.0],
        [ 1.0, 0.0],
        [ 0.0, 1.0],
        [-1.0, 0.0],
        [ 0.0, 0.0]])
    params = [1, 1/4, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]])

    # Element without constraints
    cons = np.zeros((9, 2))
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=2, 
                                  ndof_el=lambda iet: 18,
                                  ndof_el_max=18)
    assert np.allclose(assem_op, range(0, 18))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op, uel=elast_quad9)

    stiff_comp = 1/225 * np.array([
        [112, 45, 5, 0, -4, -5, -17, 0, -82, 0, 14, 20, 26, 20, 10, 0, -64, -80],
        [45, 112, 0, -17, -5, -4, 0, 5, 0, 10, 20, 26, 20, 14, 0, -82, -80, -64],
        [5, 0, 112, -45, -17, 0, -4, 5, -82, 0, 10, 0, 26, -20, 14, -20, -64, 80],
        [0, -17, -45, 112, 0, 5, 5, -4, 0, 10, 0, -82, -20, 14, -20, 26, 80, -64],
        [-4, -5, -17, 0, 112, 45, 5, 0, 26, 20, 10, 0, -82, 0, 14, 20, -64, -80],
        [-5, -4, 0, 5, 45, 112, 0, -17, 20, 14, 0, -82, 0, 10, 20, 26, -80, -64],
        [-17, 0, -4, 5, 5, 0, 112, -45, 26, -20, 14, -20, -82, 0, 10, 0, -64, 80],
        [0, 5, 5, -4, 0, -17, -45, 112, -20, 14, -20, 26, 0, 10, 0, -82, 80, -64],
        [-82, 0, -82, 0, 26, 20, 26, -20, 304, 0, -64, -80, -32, 0, -64, 80, -32, 0],
        [0, 10, 0, 10, 20, 14, -20, 14, 0, 400, -80, -64, 0, 32, 80, -64, 0, -352],
        [14, 20, 10, 0, 10, 0, 14, -20, -64, -80, 400, 0, -64, 80, 32, 0, -352, 0],
        [20, 26, 0, -82, 0, -82, -20, 26, -80, -64, 0, 304, 80, -64, 0, -32, 0, -32],
        [26, 20, 26, -20, -82, 0, -82, 0, -32, 0, -64, 80, 304, 0, -64, -80, -32, 0],
        [20, 14, -20, 14, 0, 10, 0, 10, 0, 32, 80, -64, 0, 400, -80, -64, 0, -352],
        [10, 0, 14, -20, 14, 20, 10, 0, -64, 80, 32, 0, -64, -80, 400, 0, -352, 0],
        [0, -82, -20, 26, 20, 26, 0, -82, 80, -64, 0, -32, -80, -64, 0, 304, 0, -32],
        [-64, -80, -64, 80, -64, -80, -64, 80, -32, 0, -352, 0, -32, 0, -352, 0, 1024, 0],
        [-80, -64, 80, -64, -80, -64, 80, -64, 0, -352, 0, -32, 0, -352, 0, -32, 0, 1024]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/225 * np.array([
        [16, 0, -4, 0, 1, 0, -4, 0, 8, 0, -2, 0, -2, 0, 8, 0, 4, 0],
        [0, 16, 0, -4, 0, 1, 0, -4, 0, 8, 0, -2, 0, -2, 0, 8, 0, 4],
        [-4, 0, 16, 0, -4, 0, 1, 0, 8, 0, 8, 0, -2, 0, -2, 0, 4, 0],
        [0, -4, 0, 16, 0, -4, 0, 1, 0, 8, 0, 8, 0, -2, 0, -2, 0, 4],
        [1, 0, -4, 0, 16, 0, -4, 0, -2, 0, 8, 0, 8, 0, -2, 0, 4, 0],
        [0, 1, 0, -4, 0, 16, 0, -4, 0, -2, 0, 8, 0, 8, 0, -2, 0, 4],
        [-4, 0, 1, 0, -4, 0, 16, 0, -2, 0, -2, 0, 8, 0, 8, 0, 4, 0],
        [0, -4, 0, 1, 0, -4, 0, 16, 0, -2, 0, -2, 0, 8, 0, 8, 0, 4],
        [8, 0, 8, 0, -2, 0, -2, 0, 64, 0, 4, 0, -16, 0, 4, 0, 32, 0],
        [0, 8, 0, 8, 0, -2, 0, -2, 0, 64, 0, 4, 0, -16, 0, 4, 0, 32],
        [-2, 0, 8, 0, 8, 0, -2, 0, 4, 0, 64, 0, 4, 0, -16, 0, 32, 0],
        [0, -2, 0, 8, 0, 8, 0, -2, 0, 4, 0, 64, 0, 4, 0, -16, 0, 32],
        [-2, 0, -2, 0, 8, 0, 8, 0, -16, 0, 4, 0, 64, 0, 4, 0, 32, 0],
        [0, -2, 0, -2, 0, 8, 0, 8, 0, -16, 0, 4, 0, 64, 0, 4, 0, 32],
        [8, 0, -2, 0, -2, 0, 8, 0, 4, 0, -16, 0, 4, 0, 64, 0, 32, 0],
        [0, 8, 0, -2, 0, -2, 0, 8, 0, 4, 0, -16, 0, 4, 0, 64, 0, 32],
        [4, 0, 4, 0, 4, 0, 4, 0, 32, 0, 32, 0, 32, 0, 32, 0, 256, 0],
        [0, 4, 0, 4, 0, 4, 0, 4, 0, 32, 0, 32, 0, 32, 0, 32, 0, 256]])
    assert np.allclose(mass, mass_comp)

    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1]

    els = np.array([[0, 1, 0, 0, 2, 8, 6, 1, 5, 7, 3, 4]])
    cons = np.array([
        [-1,-1],
        [ 0,-1],
        [ 0,-1],
        [-1, 0],
        [ 0, 0],
        [ 0, 0],
        [-1, 0],
        [ 0, 0],
        [ 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=2, 
                                  ndof_el=lambda iet: 18,
                                  ndof_el_max=18)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op, uel=elast_quad9)
    loads = np.array([
        [6, 0, 1/3],
        [7, 0, 4/3],
        [8, 0, 1/3]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=2)
    sol = LA.solve(stiff, rhs)
    disp = complete_disp(bc_array, pts, sol, ndof_node=2)
    disp_comp = np.array([
        [ 0.0,  0.0],
        [-0.3125, 0.0],
        [-0.625,  0.0],
        [ 0.0,  0.9375],
        [-0.3125, 0.9375],
        [-0.625,  0.9375],
        [ 0.0,  1.875],
        [-0.3125, 1.875],
        [-0.625,  1.875]])
    assert np.allclose(disp, disp_comp)


def test_elast_brick8():
    # One element in uniaxial load
    coords = np.array([
            [-1, -1, -1],
            [1, -1, -1],
            [1, 1, -1],
            [-1, 1, -1],
            [-1, -1, 1],
            [1, -1, 1],
            [1, 1, 1],
            [-1, 1, 1]])
    params = [1, 1/4, 1]

    pts = np.column_stack((range(0, 8), coords))
    cons = np.array([
        [-1, -1, -1],
        [0, -1, -1],
        [0, 0, -1],
        [-1, 0, -1],
        [-1, -1, 0],
        [0, -1, 0],
        [0, 0, 0],
        [-1, 0, 0]])

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7]])
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=3, 
                                  ndof_el=lambda iet: 24,
                                  ndof_el_max=24)
    stiff, _ = dense_assem(els, mats, pts, neq, assem_op, uel=elast_brick8)
    loads = np.array([
        [4, 0, 0, 1],
        [5, 0, 0, 1],
        [6, 0, 0, 1],
        [7, 0, 0, 1],])
    rhs = loadasem(loads, bc_array, neq, ndof_node=3)
    sol = LA.solve(stiff, rhs)
    disp = complete_disp(bc_array, pts, sol, ndof_node=3)
    disp_comp = np.array([
        [ 0.0,  0.0,  0.0],
        [-0.5,  0.0,  0.0],
        [-0.5, -0.5,  0.0],
        [ 0.0, -0.5,  0.0],
        [ 0.0,  0.0,  2.0],
        [-0.5,  0.0,  2.0],
        [-0.5, -0.5,  2.0],
        [ 0.0, -0.5,  2.0]])
    assert np.allclose(disp, disp_comp)


def test_micropolar_tri6():
    ## One element
    coords = np.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [0.0, 1.0],
            [0.5, 0.0],
            [0.5, 0.5],
            [0.0, 0.5]])
    params = [1, 1/4, 1, 1, 1, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5]])

    # Element without constraints
    cons = np.zeros((6, 3))
    pts = np.column_stack((range(0, 6), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=3, 
                                  ndof_el=lambda iet: 18,
                                  ndof_el_max=18)
    assert np.allclose(assem_op, range(0, 18))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=micropolar_tri6)

    stiff_comp = 1/90 * np.array([
        [117, -9, 12, 18, -9, -6, 21, 6, -6, -72, 36, 18, 0, 0, -6, -84, -24, 18],
        [-9, 117, -12, 6, 21, 6, -9, 18, 6, -24, -84, -18, 0, 0, 6, 36, -72, -18],
        [12, -12, 96, 0, -6, 14, 6, 0, 14, -6, 18, -60, 6, -6, -4, -18, 6, -60],
        [18, 6, 0, 54, 0, 0, 0, -6, 0, -72, -24, 0, 0, 24, 0, 0, 0, 0],
        [-9, 21, -6, 0, 63, 12, 9, 0, -6, 36, -84, 18, -36, 0, 18, 0, 0, -6],
        [-6, 6, 14, 0, 12, 51, 6, 0, -1, 12, -18, -60, -12, -6, 0, 0, 6, -4],
        [21, -9, 6, 0, 9, 6, 63, 0, -12, 0, 0, 6, 0, -36, -18, -84, 36, -18],
        [6, 18, 0, -6, 0, 0, 0, 54, 0, 0, 0, 0, 24, 0, 0, -24, -72, 0],
        [-6, 6, 14, 0, -6, -1, -12, 0, 51, -6, 0, -4, 6, 12, 0, 18, -12, -60],
        [-72, -24, -6, -72, 36, 12, 0, 0, -6, 312, -12, 48, -168, 12, 48, 0, -12, 24],
        [36, -84, 18, -24, -84, -18, 0, 0, 0, -12, 312, 0, 12, -144, -24, -12, 0, 24],
        [18, -18, -60, 0, 18, -60, 6, 0, -4, 48, 0, 272, -48, 24, -104, -24, -24, 16],
        [0, 0, 6, 0, -36, -12, 0, 24, 6, -168, 12, -48, 312, -12, -48, -144, 12, -24],
        [0, 0, -6, 24, 0, -6, -36, 0, 12, 12, -144, 24, -12, 312, 48, 12, -168, 48],
        [-6, 6, -4, 0, 18, 0, -18, 0, 0, 48, -24, -104, -48, 48, 272, 24, -48, -104],
        [-84, 36, -18, 0, 0, 0, -84, -24, 18, 0, -12, -24, -144, 12, 24, 312, -12, 0],
        [-24, -72, 6, 0, 0, 6, 36, -72, -12, -12, 0, -24, 12, -168, -48, -12, 312, -48],
        [18, -18, -60, 0, -6, -4, -18, 0, -60, 24, 24, 16, -24, 48, -104, 0, -48, 272]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/360 * np.array([
        [6, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0],
        [0, 6, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0],
        [0, 0, 6, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0],
        [-1, 0, 0, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0],
        [0, -1, 0, 0, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0],
        [0, 0, -1, 0, 0, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4],
        [-1, 0, 0, -1, 0, 0, 6, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, -1, 0, 0, -1, 0, 0, 6, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, -1, 0, 0, -1, 0, 0, 6, 0, 0, -4, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, -4, 0, 0, 32, 0, 0, 16, 0, 0, 16, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 32, 0, 0, 16, 0, 0, 16, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 32, 0, 0, 16, 0, 0, 16],
        [-4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 0, 0, 16, 0, 0],
        [0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 0, 0, 16, 0],
        [0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 0, 0, 16],
        [0, 0, 0, -4, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32, 0],
        [0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32]])
    assert np.allclose(mass, mass_comp)

    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1, 1, 1, 1]

    els = np.array([
        [0, 1, 0, 0, 2, 6, 1, 4, 3],
        [1, 1, 0, 8, 6, 2, 7, 4, 5]])
    cons = np.array([
        [-1,-1, 0],
        [ 0,-1, 0],
        [ 0,-1, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=3, 
                                  ndof_el=lambda iet: 18,
                                  ndof_el_max=18)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=micropolar_tri6)
    loads = np.array([
        [6, 0, 1/3, 0],
        [7, 0, 4/3, 0],
        [8, 0, 1/3, 0]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=3)
    sol = LA.solve(stiff, rhs)
    disp = complete_disp(bc_array, pts, sol, ndof_node=3)
    disp_comp = np.array([
        [ 0.0,  0.0, 0.0],
        [-0.3125, 0.0, 0.0],
        [-0.625,  0.0, 0.0],
        [ 0.0,  0.9375, 0.0],
        [-0.3125, 0.9375, 0.0],
        [-0.625,  0.9375, 0.0],
        [ 0.0,  1.875, 0.0],
        [-0.3125, 1.875, 0.0],
        [-0.625,  1.875, 0.0]])
    assert np.allclose(disp, disp_comp)


def test_micropolar_quad9():
    ## One element
    coords = np.array([
        [-1.0,-1.0],
        [ 1.0,-1.0],
        [ 1.0, 1.0],
        [-1.0, 1.0],
        [ 0.0,-1.0],
        [ 1.0, 0.0],
        [ 0.0, 1.0],
        [-1.0, 0.0],
        [ 0.0, 0.0]])
    params = [1, 1/4, 1, 1, 1, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]])

    # Element without constraints
    cons = np.zeros((9, 3))
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=3, 
                                  ndof_el=lambda iet: 27,
                                  ndof_el_max=27)
    assert np.allclose(assem_op, range(0, 27))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=micropolar_quad9)

    stiff_comp = 1/900 * np.array([
        [728, -45, 240, -50, -75, -60, -26, 5, 20, -28, 75, -80, -188, 300, 120, 136, -20, -80, 124, -20, -40, -280, -300, 320, -416, 80, 160],
        [-45, 728, -240, 75, -28, 80, 5, -26, -20, -75, -50, 60, -300, -280, -320, -20, 124, 40, -20, 136, 80, 300, -188, -120, 80, -416, -160],
        [240, -240, 816, -60, -80, -94, -20, 20, -4, 80, 60, -94, 120, 320, -52, 80, -40, 68, 40, -80, 68, -320, -120, -52, -160, 160, -256],
        [-50, 75, -60, 728, 45, 240, -28, -75, -80, -26, -5, 20, -188, -300, 120, -280, 300, 320, 124, 20, -40, 136, 20, -80, -416, -80, 160],
        [-75, -28, -80, 45, 728, 240, 75, -50, -60, -5, -26, 20, 300, -280, 320, -300, -188, 120, 20, 136, -80, 20, 124, -40, -80, -416, 160],
        [-60, 80, -94, 240, 240, 816, 80, -60, -94, -20, -20, -4, 120, -320, -52, -320, 120, -52, 40, 80, 68, 80, 40, 68, -160, -160, -256],
        [-26, 5, -20, -28, 75, 80, 728, -45, -240, -50, -75, 60, 124, -20, 40, -280, -300, -320, -188, 300, -120, 136, -20, 80, -416, 80, -160],
        [5, -26, 20, -75, -50, -60, -45, 728, 240, 75, -28, -80, -20, 136, -80, 300, -188, 120, -300, -280, 320, -20, 124, -40, 80, -416, 160],
        [20, -20, -4, -80, -60, -94, -240, 240, 816, 60, 80, -94, -40, 80, 68, 320, 120, -52, -120, -320, -52, -80, 40, 68, 160, -160, -256],
        [-28, -75, 80, -26, -5, -20, -50, 75, 60, 728, 45, -240, 124, 20, 40, 136, 20, 80, -188, -300, -120, -280, 300, -320, -416, -80, -160],
        [75, -50, 60, -5, -26, -20, -75, -28, 80, 45, 728, -240, 20, 136, 80, 20, 124, 40, 300, -280, -320, -300, -188, -120, -80, -416, -160],
        [-80, 60, -94, 20, 20, -4, 60, -80, -94, -240, -240, 816, -40, -80, 68, -80, -40, 68, -120, 320, -52, 320, -120, -52, 160, 160, -256],
        [-188, -300, 120, -188, 300, 120, 124, -20, -40, 124, 20, -40, 2336, 0, 960, -416, 80, 160, 32, 0, -320, -416, -80, 160, -1408, 0, 1280],
        [300, -280, 320, -300, -280, -320, -20, 136, 80, 20, 136, -80, 0, 2240, 0, 80, -416, -160, 0, -32, 0, -80, -416, 160, 0, -1088, 0],
        [120, -320, -52, 120, 320, -52, 40, -80, 68, 40, 80, 68, 960, 0, 2784, -160, 160, -256, 320, 0, -256, -160, -160, -256, -1280, 0, -448],
        [136, -20, 80, -280, -300, -320, -280, 300, 320, 136, 20, -80, -416, 80, -160, 2240, 0, 0, -416, -80, 160, -32, 0, 0, -1088, 0, 0],
        [-20, 124, -40, 300, -188, 120, -300, -188, 120, 20, 124, -40, 80, -416, 160, 0, 2336, 960, -80, -416, 160, 0, 32, -320, 0, -1408, 1280],
        [-80, 40, 68, 320, 120, -52, -320, 120, -52, 80, 40, 68, 160, -160, -256, 0, 960, 2784, -160, -160, -256, 0, 320, -256, 0, -1280, -448],
        [124, -20, 40, 124, 20, 40, -188, -300, -120, -188, 300, -120, 32, 0, 320, -416, -80, -160, 2336, 0, -960, -416, 80, -160, -1408, 0, -1280],
        [-20, 136, -80, 20, 136, 80, 300, -280, -320, -300, -280, 320, 0, -32, 0, -80, -416, -160, 0, 2240, 0, 80, -416, 160, 0, -1088, 0],
        [-40, 80, 68, -40, -80, 68, -120, 320, -52, -120, -320, -52, -320, 0, -256, 160, 160, -256, -960, 0, 2784, 160, -160, -256, 1280, 0, -448],
        [-280, 300, -320, 136, 20, 80, 136, -20, -80, -280, -300, 320, -416, -80, -160, -32, 0, 0, -416, 80, 160, 2240, 0, 0, -1088, 0, 0],
        [-300, -188, -120, 20, 124, 40, -20, 124, 40, 300, -188, -120, -80, -416, -160, 0, 32, 320, 80, -416, -160, 0, 2336, -960, 0, -1408, -1280],
        [320, -120, -52, -80, -40, 68, 80, -40, 68, -320, -120, -52, 160, 160, -256, 0, -320, -256, -160, 160, -256, 0, -960, 2784, 0, 1280, -448],
        [-416, 80, -160, -416, -80, -160, -416, 80, 160, -416, -80, 160, -1408, 0, -1280, -1088, 0, 0, -1408, 0, 1280, -1088, 0, 0, 6656, 0, 0],
        [80, -416, 160, -80, -416, -160, 80, -416, -160, -80, -416, 160, 0, -1088, 0, 0, -1408, -1280, 0, -1088, 0, 0, -1408, 1280, 0, 6656, 0],
        [160, -160, -256, 160, 160, -256, -160, 160, -256, -160, -160, -256, 1280, 0, -448, 0, 1280, -448, -1280, 0, -448, 0, -1280, -448, 0, 0, 9216]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/225 *np.array([
        [16, 0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0],
        [0, 16, 0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0],
        [0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4],
        [-4, 0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 4, 0, 0],
        [0, -4, 0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 4, 0],
        [0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 4],
        [1, 0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0],
        [0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0],
        [0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4],
        [-4, 0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, 4, 0, 0],
        [0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, 4, 0],
        [0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, 4],
        [8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 32, 0, 0],
        [0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 32, 0],
        [0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 32],
        [-2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 32, 0, 0],
        [0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 32, 0],
        [0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 32],
        [-2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, 32, 0, 0],
        [0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, 32, 0],
        [0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, 32],
        [8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 32, 0, 0],
        [0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 32, 0],
        [0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 32],
        [4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 256, 0, 0],
        [0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 256, 0],
        [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 256]])
    assert np.allclose(mass, mass_comp)

    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1, 1, 1, 1]

    els = np.array([[0, 1, 0, 0, 2, 8, 6, 1, 5, 7, 3, 4]])
    cons = np.array([
        [-1,-1, 0],
        [ 0,-1, 0],
        [ 0,-1, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = DME(cons, els, ndof_node=3, 
                                  ndof_el=lambda iet: 27,
                                  ndof_el_max=27)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=micropolar_quad9)
    loads = np.array([
        [6, 0, 1/3, 0],
        [7, 0, 4/3, 0],
        [8, 0, 1/3, 0]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=3)
    sol = LA.solve(stiff, rhs)
    disp = complete_disp(bc_array, pts, sol, ndof_node=3)
    disp_comp = np.array([
        [ 0.0,  0.0, 0.0],
        [-0.3125, 0.0, 0.0],
        [-0.625,  0.0, 0.0],
        [ 0.0,  0.9375, 0.0],
        [-0.3125, 0.9375, 0.0],
        [-0.625,  0.9375, 0.0],
        [ 0.0,  1.875, 0.0],
        [-0.3125, 1.875, 0.0],
        [-0.625,  1.875, 0.0]])
    assert np.allclose(disp, disp_comp)


def test_cst_tri6():
    ## One element
    coords = np.array([
            [0.0, 0.0],
            [1.0, 0.0],
            [0.0, 1.0],
            [0.5, 0.0],
            [0.5, 0.5],
            [0.0, 0.5]])
    params = [1, 1/4, 1, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5]])

    # Element without constraints
    cons = np.zeros((6, 3))
    pts = np.column_stack((range(0, 6), coords))
    mats = np.array([params])
    
    assem_op, bc_array, neq = assem_op_cst6(cons, els)
    assert np.allclose(assem_op, range(0, 19))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=cst_tri6)

    stiff_comp = 1/30 * np.array([
        [24, 12, 0, 6, 2, 0, 2, 2, 0, -24, -8, 0, 0, 0, 0, -8, -8, 0, 5],
        [12, 24, 0, 2, 2, 0, 2, 6, 0, -8, -8, 0, 0, 0, 0, -8, -24, 0, -5],
        [0, 0, 120, 0, 0, 20, 0, 0, 20, 0, 0, -80, 0, 0, 0, 0, 0, -80, 0],
        [6, 2, 0, 18, 0, 0, 0, -2, 0, -24, -8, 0, 0, 8, 0, 0, 0, 0, 0],
        [2, 2, 0, 0, 6, 0, -2, 0, 0, -8, -8, 0, 8, 0, 0, 0, 0, 0, 5],
        [0, 0, 20, 0, 0, 60, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0],
        [2, 2, 0, 0, -2, 0, 6, 0, 0, 0, 0, 0, 0, 8, 0, -8, -8, 0, -5],
        [2, 6, 0, -2, 0, 0, 0, 18, 0, 0, 0, 0, 8, 0, 0, -8, -24, 0, 0],
        [0, 0, 20, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0],
        [-24, -8, 0, -24, -8, 0, 0, 0, 0, 64, 16, 0, -16, -16, 0, 0, 16, 0, 20],
        [-8, -8, 0, -8, -8, 0, 0, 0, 0, 16, 64, 0, -16, -48, 0, 16, 0, 0, 0],
        [0, 0, -80, 0, 0, -80, 0, 0, 0, 0, 0, 320, 0, 0, -160, 0, 0, 0, -10],
        [0, 0, 0, 0, 8, 0, 0, 8, 0, -16, -16, 0, 64, 16, 0, -48, -16, 0, -20],
        [0, 0, 0, 8, 0, 0, 8, 0, 0, -16, -48, 0, 16, 64, 0, -16, -16, 0, 20],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 320, 0, 0, -160, -10],
        [-8, -8, 0, 0, 0, 0, -8, -8, 0, 0, 16, 0, -48, -16, 0, 64, 16, 0, 0],
        [-8, -24, 0, 0, 0, 0, -8, -24, 0, 16, 0, 0, -16, -16, 0, 16, 64, 0, -20],
        [0, 0, -80, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, -160, 0, 0, 320, -10],
        [5, -5, 0, 0, 5, 0, -5, 0, 0, 20, 0, -10, -20, 20, -10, 0, -20, -10, 0]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/360 * np.array([
        [6, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0],
        [0, 6, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-1, 0, 0, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0],
        [0, -1, 0, 0, 6, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-1, 0, 0, -1, 0, 0, 6, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, -1, 0, 0, -1, 0, 0, 6, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, -4, 0, 0, 32, 0, 0, 16, 0, 0, 16, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 32, 0, 0, 16, 0, 0, 16, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 0, 0, 16, 0, 0, 0],
        [0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 32, 0, 0, 16, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, -4, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32, 0, 0, 0],
        [0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
    assert np.allclose(mass, mass_comp)

    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1, 1]

    els = np.array([
        [0, 1, 0, 0, 2, 6, 1, 4, 3],
        [1, 1, 0, 8, 6, 2, 7, 4, 5]])
    cons = np.array([
        [-1,-1, 0],
        [ 0,-1, 0],
        [ 0,-1, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = assem_op_cst6(cons, els)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=cst_tri6)
    loads = np.array([
        [6, 0, 1/3, 0],
        [7, 0, 4/3, 0],
        [8, 0, 1/3, 0]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=3)
    sol = LA.solve(stiff, rhs)
    dof_sol = sol[:-2]
    skew_stress = sol[-2:]
    disp = complete_disp(bc_array, pts, dof_sol, ndof_node=3)
    disp_comp = np.array([
        [ 0.0,  0.0, 0.0],
        [-0.3125, 0.0, 0.0],
        [-0.625,  0.0, 0.0],
        [ 0.0,  0.9375, 0.0],
        [-0.3125, 0.9375, 0.0],
        [-0.625,  0.9375, 0.0],
        [ 0.0,  1.875, 0.0],
        [-0.3125, 1.875, 0.0],
        [-0.625,  1.875, 0.0]])
    assert np.allclose(disp, disp_comp)
    assert np.allclose(skew_stress, [0, 0])


def test_cst_quad9():
    ## One element
    coords = np.array([
        [-1.0,-1.0],
        [ 1.0,-1.0],
        [ 1.0, 1.0],
        [-1.0, 1.0],
        [ 0.0,-1.0],
        [ 1.0, 0.0],
        [ 0.0, 1.0],
        [-1.0, 0.0],
        [ 0.0, 0.0]])
    params = [1, 1/4, 1, 1]

    els = np.array([[0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8]])

    # Element without constraints
    cons = np.zeros((9, 3))
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = assem_op_cst(cons, els)
    assert np.allclose(assem_op, range(0, 28))

    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=cst_quad9)

    stiff_comp = 1/225 * np.array([
        [112, 45, 0, 5, 0, 0, -4, -5, 0, -17, 0, 0, -82, 0, 0, 14, 20, 0, 26, 20, 0, 10, 0, 0, -64, -80, 0, 75],
        [45, 112, 0, 0, -17, 0, -5, -4, 0, 0, 5, 0, 0, 10, 0, 20, 26, 0, 20, 14, 0, 0, -82, 0, -80, -64, 0, -75],
        [0, 0, 560, 0, 0, -30, 0, 0, -20, 0, 0, -30, 0, 0, -180, 0, 0, 100, 0, 0, 100, 0, 0, -180, 0, 0, -320, -50],
        [5, 0, 0, 112, -45, 0, -17, 0, 0, -4, 5, 0, -82, 0, 0, 10, 0, 0, 26, -20, 0, 14, -20, 0, -64, 80, 0, 75],
        [0, -17, 0, -45, 112, 0, 0, 5, 0, 5, -4, 0, 0, 10, 0, 0, -82, 0, -20, 14, 0, -20, 26, 0, 80, -64, 0, 75],
        [0, 0, -30, 0, 0, 560, 0, 0, -30, 0, 0, -20, 0, 0, -180, 0, 0, -180, 0, 0, 100, 0, 0, 100, 0, 0, -320, -50],
        [-4, -5, 0, -17, 0, 0, 112, 45, 0, 5, 0, 0, 26, 20, 0, 10, 0, 0, -82, 0, 0, 14, 20, 0, -64, -80, 0, -75],
        [-5, -4, 0, 0, 5, 0, 45, 112, 0, 0, -17, 0, 20, 14, 0, 0, -82, 0, 0, 10, 0, 20, 26, 0, -80, -64, 0, 75],
        [0, 0, -20, 0, 0, -30, 0, 0, 560, 0, 0, -30, 0, 0, 100, 0, 0, -180, 0, 0, -180, 0, 0, 100, 0, 0, -320, -50],
        [-17, 0, 0, -4, 5, 0, 5, 0, 0, 112, -45, 0, 26, -20, 0, 14, -20, 0, -82, 0, 0, 10, 0, 0, -64, 80, 0, -75],
        [0, 5, 0, 5, -4, 0, 0, -17, 0, -45, 112, 0, -20, 14, 0, -20, 26, 0, 0, 10, 0, 0, -82, 0, 80, -64, 0, -75],
        [0, 0, -30, 0, 0, -20, 0, 0, -30, 0, 0, 560, 0, 0, 100, 0, 0, 100, 0, 0, -180, 0, 0, -180, 0, 0, -320, -50],
        [-82, 0, 0, -82, 0, 0, 26, 20, 0, 26, -20, 0, 304, 0, 0, -64, -80, 0, -32, 0, 0, -64, 80, 0, -32, 0, 0, 300],
        [0, 10, 0, 0, 10, 0, 20, 14, 0, -20, 14, 0, 0, 400, 0, -80, -64, 0, 0, 32, 0, 80, -64, 0, 0, -352, 0, 0],
        [0, 0, -180, 0, 0, -180, 0, 0, 100, 0, 0, 100, 0, 0, 1760, 0, 0, -320, 0, 0, 0, 0, 0, -320, 0, 0, -960, -200],
        [14, 20, 0, 10, 0, 0, 10, 0, 0, 14, -20, 0, -64, -80, 0, 400, 0, 0, -64, 80, 0, 32, 0, 0, -352, 0, 0, 0],
        [20, 26, 0, 0, -82, 0, 0, -82, 0, -20, 26, 0, -80, -64, 0, 0, 304, 0, 80, -64, 0, 0, -32, 0, 0, -32, 0, 300],
        [0, 0, 100, 0, 0, -180, 0, 0, -180, 0, 0, 100, 0, 0, -320, 0, 0, 1760, 0, 0, -320, 0, 0, 0, 0, 0, -960, -200],
        [26, 20, 0, 26, -20, 0, -82, 0, 0, -82, 0, 0, -32, 0, 0, -64, 80, 0, 304, 0, 0, -64, -80, 0, -32, 0, 0, -300],
        [20, 14, 0, -20, 14, 0, 0, 10, 0, 0, 10, 0, 0, 32, 0, 80, -64, 0, 0, 400, 0, -80, -64, 0, 0, -352, 0, 0],
        [0, 0, 100, 0, 0, 100, 0, 0, -180, 0, 0, -180, 0, 0, 0, 0, 0, -320, 0, 0, 1760, 0, 0, -320, 0, 0, -960, -200],
        [10, 0, 0, 14, -20, 0, 14, 20, 0, 10, 0, 0, -64, 80, 0, 32, 0, 0, -64, -80, 0, 400, 0, 0, -352, 0, 0, 0],
        [0, -82, 0, -20, 26, 0, 20, 26, 0, 0, -82, 0, 80, -64, 0, 0, -32, 0, -80, -64, 0, 0, 304, 0, 0, -32, 0, -300],
        [0, 0, -180, 0, 0, 100, 0, 0, 100, 0, 0, -180, 0, 0, -320, 0, 0, 0, 0, 0, -320, 0, 0, 1760, 0, 0, -960, -200],
        [-64, -80, 0, -64, 80, 0, -64, -80, 0, -64, 80, 0, -32, 0, 0, -352, 0, 0, -32, 0, 0, -352, 0, 0, 1024, 0, 0, 0],
        [-80, -64, 0, 80, -64, 0, -80, -64, 0, 80, -64, 0, 0, -352, 0, 0, -32, 0, 0, -352, 0, 0, -32, 0, 0, 1024, 0, 0],
        [0, 0, -320, 0, 0, -320, 0, 0, -320, 0, 0, -320, 0, 0, -960, 0, 0, -960, 0, 0, -960, 0, 0, -960, 0, 0, 5120, -800],
        [75, -75, -50, 75, 75, -50, -75, 75, -50, -75, -75, -50, 300, 0, -200, 0, 300, -200, -300, 0, -200, 0, -300, -200, 0, 0, -800, 0]])
    assert np.allclose(stiff, stiff_comp)

    mass_comp = 1/225 * np.array([
        [16, 0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, 0],
        [0, 16, 0, 0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-4, 0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 4, 0, 0, 0],
        [0, -4, 0, 0, 16, 0, 0, -4, 0, 0, 1, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 0],
        [0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -4, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-4, 0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, 4, 0, 0, 0],
        [0, -4, 0, 0, 1, 0, 0, -4, 0, 0, 16, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, 4, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 32, 0, 0, 0],
        [0, 8, 0, 0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 32, 0, 0, 0],
        [0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -2, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, -16, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [-2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, 32, 0, 0, 0],
        [0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 8, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 4, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 32, 0, 0, 0],
        [0, 8, 0, 0, -2, 0, 0, -2, 0, 0, 8, 0, 0, 4, 0, 0, -16, 0, 0, 4, 0, 0, 64, 0, 0, 32, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 256, 0, 0, 0],
        [0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 32, 0, 0, 256, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
    assert np.allclose(mass, mass_comp)
#
    ## Uniaxial stress
    coords = np.array([
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0]])
    params = [1, 1/4, 1, 1]

    els = np.array([[0, 1, 0, 0, 2, 8, 6, 1, 5, 7, 3, 4]])
    cons = np.array([
        [-1,-1, 0],
        [ 0,-1, 0],
        [ 0,-1, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0],
        [-1, 0, 0],
        [ 0, 0, 0],
        [ 0, 0, 0]])
    pts = np.column_stack((range(0, 9), coords))
    mats = np.array([params])
    assem_op, bc_array, neq = assem_op_cst(cons, els)
    stiff, mass = dense_assem(els, mats, pts, neq, assem_op,
                              uel=cst_quad9)
    loads = np.array([
        [6, 0, 1/3, 0],
        [7, 0, 4/3, 0],
        [8, 0, 1/3, 0]])
    rhs = loadasem(loads, bc_array, neq, ndof_node=3)
    sol = LA.solve(stiff, rhs)
    dof_sol = sol[:-1]
    skew_stress = sol[-1]
    disp = complete_disp(bc_array, pts, dof_sol, ndof_node=3)
    disp_comp = np.array([
        [ 0.0,  0.0, 0.0],
        [-0.3125, 0.0, 0.0],
        [-0.625,  0.0, 0.0],
        [ 0.0,  0.9375, 0.0],
        [-0.3125, 0.9375, 0.0],
        [-0.625,  0.9375, 0.0],
        [ 0.0,  1.875, 0.0],
        [-0.3125, 1.875, 0.0],
        [-0.625,  1.875, 0.0]])
    assert np.allclose(disp, disp_comp)
    assert np.allclose(skew_stress, 0)
